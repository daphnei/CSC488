// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;      // Must always import this.

//Do all the imports for the various 488 language objects.
import compiler488.ast.ASTList;
import compiler488.ast.Printable;
import compiler488.ast.decl.ArrayDeclPart;
import compiler488.ast.decl.Declaration;
import compiler488.ast.decl.DeclarationPart;
import compiler488.ast.decl.MultiDeclarations;
import compiler488.ast.decl.RoutineDecl;
import compiler488.ast.decl.ScalarDecl;
import compiler488.ast.decl.ScalarDeclPart;
import compiler488.ast.expn.AnonFuncExpn;
import compiler488.ast.expn.ArithExpn;
import compiler488.ast.expn.BoolConstExpn;
import compiler488.ast.expn.BoolExpn;
import compiler488.ast.expn.CompareExpn;
import compiler488.ast.expn.EqualsExpn;
import compiler488.ast.expn.Expn;
import compiler488.ast.expn.FunctionCallExpn;
import compiler488.ast.expn.IdentExpn;
import compiler488.ast.expn.IntConstExpn;
import compiler488.ast.expn.NotExpn;
import compiler488.ast.expn.SkipConstExpn;
import compiler488.ast.expn.SubsExpn;
import compiler488.ast.expn.TextConstExpn;
import compiler488.ast.expn.UnaryMinusExpn;
import compiler488.ast.stmt.AssignStmt;
import compiler488.ast.stmt.ExitStmt;
import compiler488.ast.stmt.GetStmt;
import compiler488.ast.stmt.IfStmt;
import compiler488.ast.stmt.LoopStmt;
import compiler488.ast.stmt.ProcedureCallStmt;
import compiler488.ast.stmt.Program;
import compiler488.ast.stmt.PutStmt;
import compiler488.ast.stmt.ReturnStmt;
import compiler488.ast.stmt.Scope;
import compiler488.ast.stmt.Stmt;
import compiler488.ast.stmt.WhileDoStmt;
import compiler488.ast.type.BooleanType;
import compiler488.ast.type.IntegerType;
import compiler488.ast.type.Type;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

    String lastError;
    
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
    {
    	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

        	/* s.left is supposed to hold the line number of the error.
         	 * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
         	*/
   
            if (s.left >= 0)                // Check line number.
        {
                st += " in line " + (s.left + 1);
                if (s.right >= 0)           // Check column number.
                    st += ", column " + (s.right + 1);
        }
            else
               st += " at end of input " ;
           }
        st += ": " + message;
        System.err.println (st);
        lastError = st;
    }
   
    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException                        */
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
    {
        report_error (message, info);
        throw new SyntaxErrorException (lastError); 
    }
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */

// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010 

// Terminals returned by the scanner with no value attached.  
terminal    AND,    OR, NOT,    TRUE,   FALSE   ;
terminal    BOOLEAN,INTEGER,FUNCTION,PROCEDURE  ;
terminal    BEGIN,  DO, ELSE,   END,    EXIT    ;
terminal    IF, RETURN, LOOP,   PUT,    GET ;
terminal    THEN,   WHILE,  SKIP,   YIELDS, WHEN    ;

// Special-character terminals, no value attached
terminal    L_PAREN ,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY ;
terminal    EQUAL,  GREATER, LESS,  COMMA,  DOT ;
terminal    PLUS,   MINUS,  TIMES,  DIVIDE  ;

// Terminals returned by the scanner with a value.
terminal String  IDENT  ;
terminal Integer INTCONST   ;
terminal String  TEXTCONST  ;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal Program program;
nonterminal Stmt statement;
nonterminal Declaration declaration;
nonterminal Scope scope;
nonterminal ASTList<DeclarationPart> variablenames;
nonterminal Printable output;
nonterminal Type type;
nonterminal ASTList<Expn> arguments;
nonterminal ASTList<ScalarDecl> parameters;
nonterminal Expn variable;
nonterminal Expn expression;
nonterminal DeclarationPart variablename;
nonterminal ASTList<Stmt> declarationsAndStatements;
nonterminal ASTList<Expn> inputs;
nonterminal ASTList<Printable> outputs;
nonterminal int[] bound;
nonterminal Integer generalBound;
nonterminal ProcedureCallStmt procedureCall;
nonterminal ScalarDecl parameter;
nonterminal Expn conjunction;
nonterminal Expn negation;
nonterminal Expn compareExpn;
nonterminal Expn arithExpn;
nonterminal Expn term;
nonterminal Expn factor;
nonterminal Expn primary;
nonterminal Expn constant;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;        // Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program                     ::= scope:sco                   // the main program
                                {: RESULT = new Program(sco, scoleft, scoright); :}
                            ; 

scope                       ::= BEGIN declarationsAndStatements:in END      // non empty scope
                                {: RESULT = new Scope(in, inleft, inright); :} 
                            |   BEGIN:in END                // empty scope
                                {: RESULT = new Scope(inleft, inright); :}
                            ;

//  sequence of arbitrarily intermixed declarations and statements
declarationsAndStatements   ::= statement:stm
                                {:  ASTList<Stmt> element = new ASTList<Stmt>();
                                    element.add(stm);
                                    RESULT = element; :}
                            |   declaration:dec
                                {:  ASTList<Stmt> element = new ASTList<Stmt>();
                                    element.add(dec);
                                    RESULT = element; :}
                            |   declarationsAndStatements:many statement:more
                                {:  many.add(more);
                                    RESULT = many; :}
                            |   declarationsAndStatements:many declaration:more
                                {:  many.add(more);
                                    RESULT = many; :}
                            ;

statement                   ::= variable:var LESS:mid EQUAL expression:expr                      // assignment statement
                                {:  RESULT = new AssignStmt(var, expr, midleft, midright); :} 
                            |   IF:mid expression:exp THEN declarationsAndStatements:dec END    // if statements
                                {:  RESULT = new IfStmt(exp, dec, midleft, midright); :} 
                            |   IF:mid expression:exp THEN declarationsAndStatements:dec1 ELSE declarationsAndStatements:dec2 END
                                {:  RESULT = new IfStmt(exp, dec1, dec2, midleft, midright); :} 
                            |   WHILE:mid expression:exp DO declarationsAndStatements:dec END   // while statement
                                {:  RESULT = new WhileDoStmt(exp, dec, midleft, midright); :} 
                            |   LOOP:mid declarationsAndStatements:loop END                     // loop statement
                                {:  RESULT = new LoopStmt(loop, midleft, midright); :} 
                            |   EXIT:mid                                                        // exit statements
                                {:  RESULT = new ExitStmt(midleft, midright); :} 
                            |   EXIT:mid WHEN expression:exp
                                {:  RESULT = new ExitStmt(exp, midleft, midright); :} 
                            |   RETURN:mid                                                      // return statements
                                {:  RESULT = new ReturnStmt(midleft, midright); :} 
                            |   RETURN:mid L_PAREN expression:exp R_PAREN
                                {:  RESULT = new ReturnStmt(exp, midleft, midright); :} 
                            |   PUT:mid outputs:out                                             // input/output statments
                                {:  RESULT = new PutStmt(out, midleft, midright); :} 
                            |   GET:mid inputs:in
                                {:  RESULT = new GetStmt(in, midleft, midright); :} 
                            |   procedureCall:proc                                              // procedure call
                                {:  RESULT = proc; :} 
                            |   scope:in                                                        // embedded scope
                                {:  RESULT = in; :}
                            ;

procedureCall               ::= IDENT:id                    // call procedure with no parameters
                                {:  RESULT = new ProcedureCallStmt(id, idleft, idright); :}
                            |   IDENT:id L_PAREN:mid arguments:arg R_PAREN      // call procedure with parameters
                                {:  RESULT = new ProcedureCallStmt(id, arg, midleft, midright); :}
                            ;

declaration                 ::= type:ty variablenames:var           // declare scalar/array variables
                                {:  RESULT = new MultiDeclarations(ty, var, tyleft, tyright); :}
                            | type:ty FUNCTION:mid IDENT:id scope:sc      // declare function
                                {:  RESULT = new RoutineDecl(id, ty, sc, midleft, midright); :} 
                            | type:ty FUNCTION:mid IDENT:id L_PAREN parameters:para R_PAREN scope:sc
                                {:  RESULT = new RoutineDecl(id, ty, para, sc, midleft, midright); :} 
                            | PROCEDURE:mid IDENT:id scope:sc         //  declare procedure
                                {:  RESULT = new RoutineDecl(id, sc, midleft, midright); :} 
                            | PROCEDURE:mid IDENT:id L_PAREN parameters:para R_PAREN scope:sc
                                {:  RESULT = new RoutineDecl(id, para, sc, midleft, midright); :} 
                            ;

variablenames               ::= variablename:var                // list of variables being declared
                                {:  ASTList<DeclarationPart> element = new ASTList<DeclarationPart>();
                                    element.add(var);           
                                    RESULT = element; :}
                            |   variablenames:many COMMA:mid variablename:more 
                                {:  many.add(more);
                                    RESULT = many; :} 
                            ;

variablename                ::= IDENT:var                       // scalar variable
                                {:  RESULT = new ScalarDeclPart(var, varleft, varright); :} 
                            |   IDENT:var L_SQUARE bound:b R_SQUARE         // one dimensional array variable
                                {:  RESULT = new ArrayDeclPart(var, b[0], b[1], varleft, varright); :} 
                            |   IDENT:var L_SQUARE bound:b1 COMMA bound:b2  R_SQUARE    // two dimensional array variable
                                {:  RESULT = new ArrayDeclPart(var, b1[0], b1[1], b2[0], b2[1], varleft, varright); :} 
                            ;

bound                       ::= INTCONST:g                  // positive array bound TO-DO
                                {:  int[] in = {g, 0};
                                    RESULT = in; :}
                            |   generalBound:g1 DOT DOT generalBound:g2     // positive or negative array bounds TO-DO
                                {:  int[] in = {g1, g2};
                                    RESULT = in; :}
                            ;
        
generalBound                ::= INTCONST:val        // positive array bound
                                {:  RESULT = val; :}
                            |   MINUS INTCONST:val      // negative array bound
                                {:  RESULT = -val; :}
                            ;

type                        ::= INTEGER:in          // integer type
                                {:  RESULT = new IntegerType(); :}
                            |   BOOLEAN :bool       // boolean type
                                {:  RESULT = new BooleanType(); :}
                            ;

outputs                     ::= output:var          // list of output expressions
                                {:  ASTList<Printable> element = new ASTList<Printable>();
                                    element.add(var);           
                                    RESULT = element; :}
                            |   outputs:many COMMA:mid output:more
                                {:  many.add(more);
                                    RESULT = many; :}
                            ;

output                      ::= expression:exp      // integer expression
                                {:  RESULT = exp; :}
                            |   TEXTCONST:txt       // text constant
                                {:  RESULT = new TextConstExpn(txt, txtleft, txtright); :}
                            |   SKIP:mid            // skip pseudo constant
                                {:  RESULT = new SkipConstExpn(); :}
                            ;

inputs                      ::= variable:var        // list of variables being read into
                                {:  ASTList<Expn> element = new ASTList<Expn>();
                                    element.add(var);
                                    RESULT = element; :}
                            |   inputs:many COMMA:mid variable:more
                                {:  many.add(more);
                                    RESULT = many; :}
                            ;

arguments                   ::= expression:exp          // list of function/procedure arguments
                                {:  ASTList<Expn> element = new ASTList<Expn>();
                                    element.add(exp);
                                    RESULT = element;           :}
                            |   arguments:many COMMA:mid expression:more
                                {: many.add(more); 
                                    RESULT = many;          :} 
                            ;

parameters                  ::= parameter:par           // list of function/procedure formal parameters
                                {:  ASTList<ScalarDecl> element = new ASTList<ScalarDecl>();
                                    element.add(par);
                                    RESULT = element; :}
                            |   parameters:many COMMA:mid parameter:more
                                {:  many.add(more);           
                                    RESULT = many; :} 
                            ;

parameter                   ::= type:ty IDENT:id            // declare one parameter
                                {:  RESULT = new ScalarDecl(id, ty, tyleft, tyright); :}
                            ;

expression                  ::= conjunction:con         // disjunctions,  associate left-to-right
                                {:  RESULT = con; :}
                            |   expression:exp1 OR:mid conjunction:exp2
                                {:  RESULT = new BoolExpn("|", exp1, exp2, midleft, midright); :} 
                            ;

conjunction                 ::= negation:neg            // conjunctions,  associate left-to-right
                                {:  RESULT = neg; :} 
                            |   conjunction:exp1 AND:mid negation:exp2
                                {:  RESULT = new BoolExpn("&", exp1, exp2, midleft, midright); :} 
                            ;

negation                    ::= compareExpn:com             // negations
                                {:  RESULT = com; :}
                            |   NOT:mid negation:neg
                                {:  RESULT = new NotExpn(neg, midleft, midright); :} 
                            ;

compareExpn                 ::= arithExpn:ari           // comparisons,  do not associate
                                {:  RESULT = ari; :}
                            |   arithExpn:exp1 EQUAL:mid arithExpn:exp2
                                {:  RESULT = new EqualsExpn("=", exp1, exp2, midleft, midright); :} 
                            |   arithExpn:exp1 NOT:mid EQUAL arithExpn:exp2
                                {:  RESULT = new EqualsExpn("!=", exp1, exp2, midleft, midright); :} 
                            |   arithExpn:exp1 LESS:mid arithExpn:exp2
                                {:  RESULT = new CompareExpn("<", exp1, exp2, midleft, midright); :} 
                            |   arithExpn:exp1 LESS:mid EQUAL arithExpn:exp2
                                {:  RESULT = new CompareExpn("<=", exp1, exp2, midleft, midright); :} 
                            |   arithExpn:exp1 GREATER:mid arithExpn:exp2
                                {:  RESULT = new CompareExpn(">", exp1, exp2, midleft, midright); :} 
                            |   arithExpn:exp1 GREATER:mid EQUAL arithExpn:exp2
                                {:  RESULT = new CompareExpn(">=", exp1, exp2, midleft, midright); :} 
                            ;

arithExpn                   ::= term:t                // expressions,  associate + ,  - left-to-right
                                {:  RESULT = t; :}
                            |   arithExpn:left  PLUS:mid  term:right
                                {:  RESULT = new ArithExpn("+", left, right, midleft, midright); :}
                            |   arithExpn:left  MINUS:mid term:right
                                {:  RESULT = new ArithExpn("-", left, right, midleft, midright); :}
                            ;

term                        ::= factor:fac              // terms,  associate * ,  /   left-to-right
                                {:  RESULT = fac; :}
                            |   term:left TIMES:mid factor:right
                                {:  RESULT = new ArithExpn("*", left, right, midleft, midright); :}
                            |   term:left DIVIDE:mid factor:right
                                {:  RESULT = new ArithExpn("/", left, right, midleft, midright); :}
                            ;

factor                      ::= primary:pri             // unary minus
                                {:  RESULT = pri; :}
                            |   MINUS:mid factor:fac
                                {:  RESULT = new UnaryMinusExpn(fac, midleft, midright); :}
                            ;

primary                     ::= constant:con                // integer or boolean constant
                                {:  RESULT = con; :}  
                            |   variable:var                // scalar,  array variable or function call
                                {:  RESULT = var; :}
                            |   IDENT:id L_PAREN:mid arguments:arg R_PAREN  // function call
                                {:  RESULT = new FunctionCallExpn(id, arg, midleft, midright); :} 
                            |   L_PAREN expression:expn R_PAREN        // parenthesized expression
                                {:  RESULT = expn; :}
                            |   L_CURLEY declarationsAndStatements:body YIELDS:mid expression:exp R_CURLEY  // anon function
                                {:  RESULT = new AnonFuncExpn(body, exp, midleft, midright); :} 
                            ;

constant                    ::= INTCONST:in // integer constant
                                {:  RESULT = new IntConstExpn(((Integer)in)); :} 
                            |   TRUE:t      // constant true
                                {:  RESULT = new BoolConstExpn(true); :} 
                            |   FALSE:f     // constant false
                                {:  RESULT = new BoolConstExpn(false); :} 
                            ;

variable                    ::= IDENT:id                    // scalar variable or function call
                                {:  RESULT = new IdentExpn(id, idleft, idright); :} 
                            |   IDENT:id L_SQUARE:mid expression:exp R_SQUARE   // element of a 1-D  array
                                {:  RESULT = new SubsExpn(id, exp, midleft, midright); :} 
                            |   IDENT:id L_SQUARE:mid expression:exp1 COMMA expression:exp2 R_SQUARE    // element of a 2-D array
                                {:  RESULT = new SubsExpn(id, exp1, exp2, midleft, midright); :} 
                            ;

