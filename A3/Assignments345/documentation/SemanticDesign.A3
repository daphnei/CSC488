Semantic Design

We chose the Visitor Pattern for its clean design structure and ease of adaptability.
Looking ahead to the next assignment, we reasoned that we could use a similar visitation
strategy for code generation. Moreover, we liked how this design pattern would allow us to
do all semantic processing in one consolidated place (SemanticActions.java)
rather than disperse them across various AST subclasses.

Here is a list of the major interfaces and classes involved in our implementation of the
Visitor Pattern, along with a brief description of each:

IVisitor: Interface for classes that will be doing the visiting. Contains polymorphic
definitions for visit method to handle different AST subclasses.

IVisitableElement: Interface for (AST) elements/nodes that will be visited. Implemented by
BaseAST.

NodeVisitor: Base class that implements IVisitor ahd handles the ordering of visitation. In
this class one visitable element will accept the visitation of its children. This is where
the traversal of the AST takes place. It contains no semantic checking. 

Semantics: This class extends NodeVisitor and handles the checking of the semantic rules. 
For each node in the AST, the proper semantic actions are applied according to the 
numbering provided to us in the Source Language specification. Semantics only checks the
semantic rules. The implementation of the semantic rules is stored elsewhere.

Semantics: A class that extends NodeVisitor, and keeps track of scope and state as it
iterates over the AST and verifies that the semantics of the program are correct.
For each node in the AST, it will call the appropriate semantic actions for each node
through a common "semanticActions" method. The method takes the node to analyaze and the
number of the semantic action to check. The numbers are the same as those from the 
Semantics handout, so that it is easy for use to ensure all cases have been covered.
While the semantics are running, they can throw a SemanticsErrorException, which is
caught by this class, and used to show an error message to the user. This
SemanticsErrorException has several child types with unique error messages.

SemanticActions: This class stored the implemenation of the semantic rules described in the
Source Language specification. The main logic occurs in the checkSemanticRule method, which
takes in a semantic action index and the current AST node. It then performs the specified
action on that node.

The checkSemanticRule method will throw a SemanticErrorException if a semantic rule is
violated. The SemanticErrorException includes a user-friendly message explaining 
the nature of the problem. SemanticErrorExceptions are caught in the Semantics class, 
and the error is printed out. The use of Exceptions allows our program to continue processing
the AST even when a semantic error has occured. In this way, we can find and present to the
user as many errors as possible. 

We avoid presenting duplicate errors by keeping track of what the previous error was, and
then not printing it if it shows up again. In addition, for expressions, once the first
error has been detected, all future errors for that expression will be supressed by only
choosing to throw an error if the expression's resultType is not already of type Error.

An issue we struggled with was mapping the semantic action codes to our implementation in
a one-to-one manner. As you'll notice, some of the semantic actions in our implementation
don't explicitly have corresponding code to execute, as they are done implicitly or too
closely tied to another semantic action that we had to process such actions as part of
dealing with another semantic operator. For example, S47 for associating a type with a
variable is not explicitly dealt with, as we bind types to variables as part of the
declaration of that variable.

Another problem that arose was dealing with declaration type tracking. Since we wanted to
keep the AST very separated from the analysis, we were not sure where to store type
information to handle features like multiple variable declarations. After exploring some
several options, we decided on the following. We always store a current type for declarations
that we can refer to for processing multiple declarations.

We added our own SemType semantic type system to represent types in the Symbol table.
This includes PrimitiveTypes such as Boolean and Integer, and more complex types such as 
Array and Routine.

