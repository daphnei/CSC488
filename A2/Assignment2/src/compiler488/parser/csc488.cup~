// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    public void report_fatal_error (String message, Object info) 
	{
        report_error (message, info);
	}
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010 

// Terminals returned by the scanner with no value attached.  
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	BEGIN,	DO,	ELSE,	END,	EXIT	;
terminal	IF,	RETURN,	LOOP,	PUT,	GET	;
terminal	THEN,	WHILE,	SKIP,	YIELDS, WHEN	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal statementSingle, statementMultiple;
nonterminal variableNamesSingle, variableNamesMultiple;
nonterminal outputSingle, outputMultiple;
nonterminal inputSingle, inputMultiple;
nonterminal argumentsSingle, argumentsMultiple;
nonterminal parametersSingle, parametersMultiple;

//For Daphne's failed attempt at improving the expression code.
//nonterminal anyExpression, orExpression, andExpression, negationExpression;
//nonterminal compareExpression, transitionExpression, multDivideExpression, unaryExpression;



nonterminal simpleExpression, timesExpression, minusExpression, basicExpression, intExpression, andExpression, negationExpression;
//The original nonterminals used in the expression code.
//nonterminal expression, expression1, expression2, expression3, expression4, expression5, expression6, expression7, expression8;
nonterminal expression;
nonterminal program, scope, bound, generalBound;
nonterminal type, variable;
nonterminal variablename, arrayname, functionname, parametername, procedurename;

/**********************************************************

The nonterminals from your grammar go here

***********************************************************/

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

// most of the STATE and STATEn were create to avoid ambiguity
//basically this is a simple transcript of the source language definition
// all working except functions and variables inside expressions

//The entire program must be in a scope.
program ::= scope;

//A single statement.
statementSingle ::=         variable LESS EQUAL expression
                          | IF expression THEN statementMultiple END
                          | IF expression THEN statementMultiple ELSE statementMultiple END
                          | WHILE expression DO statementMultiple END
                          | LOOP statementMultiple END
                          | EXIT
                          | EXIT WHEN expression
                          | RETURN L_PAREN expression R_PAREN
                          | RETURN
                          | PUT outputMultiple
                          | GET inputMultiple
                          | procedurename
                          | procedurename L_PAREN argumentsMultiple R_PAREN
                          | scope
                          | type variableNamesMultiple
                          | type FUNCTION functionname scope
                          | type FUNCTION functionname L_PAREN parametersMultiple R_PAREN scope
                          | PROCEDURE procedurename scope
                          | PROCEDURE procedurename L_PAREN parametersMultiple R_PAREN scope;

//A combination of 1 or more statements.
statementMultiple ::=       statementMultiple statementSingle
                          | statementSingle;    

variableNamesSingle ::=     variablename
                          | variablename L_SQUARE bound R_SQUARE
                          | variablename L_SQUARE bound COMMA bound R_SQUARE;

                          
variableNamesMultiple ::=   variableNamesSingle COMMA variableNamesMultiple
                          | variableNamesSingle;

bound ::=                   INTCONST
                          | generalBound DOT DOT generalBound;

generalBound ::=            INTCONST
                          | MINUS INTCONST;

scope ::=                   BEGIN statementMultiple END
                          | BEGIN END;

outputSingle ::=            expression
                          | TEXTCONST
                          | SKIP;
outputMultiple ::=          outputSingle COMMA outputMultiple
                          | outputSingle;

inputSingle ::=             variable;
inputMultiple ::=           inputSingle COMMA inputMultiple
                          | inputSingle;

type ::=                    INTEGER
                          | BOOLEAN;

argumentsSingle ::=         expression;
argumentsMultiple ::=       argumentsSingle COMMA argumentsMultiple
                          | argumentsSingle;

parametersSingle ::=        type parametername;
parametersMultiple ::=      parametersSingle COMMA parametersMultiple
                          | parametersSingle;

variable ::=                variablename
                          | arrayname L_SQUARE expression R_SQUARE
                          | arrayname L_SQUARE expression COMMA expression R_SQUARE;

//Daphne's attempt at cleaning up the expression code. Right not this doesn't work.
/*Jordan working on it, do not delete
/*
expression ::=              unaryExpression
                            | anyExpression
                            | expression OR andExpression;*/
/*
expression ::=            expression OR andExpression
                          | parametername
                          | L_CURLEY statementMultiple YIELDS anyExpression R_CURLEY 
                          | andExpression;

andExpression ::=          andExpression AND negationExpression
                          | negationExpression;

negationExpression ::=      NOT transitionExpression
                          | transitionExpression;

transitionExpression ::=       compareExpression LESS compareExpression
                          | compareExpression LESS EQUAL compareExpression
                          | compareExpression GREATER compareExpression
                          | compareExpression GREATER EQUAL compareExpression
                          | compareExpression EQUAL compareExpression
                          | compareExpression NOT EQUAL compareExpression
                          | compareExpression;

compareExpression ::=   compareExpression PLUS multDivideExpression
                          | compareExpression MINUS multDivideExpression
                          | TRUE
                          | FALSE
                          | multDivideExpression;

multDivideExpression ::=    multDivideExpression TIMES unaryExpression 
                          | multDivideExpression DIVIDE unaryExpression
                          | unaryExpression;

unaryExpression ::=        MINUS expression
                          | L_PAREN expression R_PAREN ;

finalExpression ::= INTCONST;*/

expression ::= expression OR andExpression 
                     | L_CURLEY statementMultiple YIELDS expression R_CURLEY 
                     | parametername
                     | andExpression;

andExpression ::= andExpression AND negationExpression 
                      | negationExpression;

negationExpression ::= NOT compareExpression 
                      | compareExpression;



compareExpression ::= simpleExpression EQUAL simpleExpression 
              | simpleExpression NOT EQUAL simpleExpression 
              | simpleExpression LESS simpleExpression 
              | simpleExpression LESS EQUAL simpleExpression
              | simpleExpression GREATER simpleExpression 
              | simpleExpression GREATER EQUAL simpleExpression 
              | simpleExpression;


simpleExpression ::= simpleExpression PLUS timesExpression 
              | simpleExpression MINUS timesExpression 
              | timesExpression 
              | TRUE 
              | FALSE ; 
/*
* here should be also accepted functions and variable however it is not working
* variable | functionname | functionname L_PAREN arguments R_PAREN;
*/




timesExpression ::= timesExpression TIMES minusExpression 
              | timesExpression DIVIDE minusExpression 
              | minusExpression;

minusExpression ::= MINUS basicExpression 
              | basicExpression;

basicExpression ::= L_PAREN expression R_PAREN 
              | intExpression ; 

intExpression ::= INTCONST;

/*
* here should be also accepted functions and variable however it is not working
* variable | functionname | functionname L_PAREN arguments R_PAREN;
*/


variablename ::= IDENT;
arrayname ::= IDENT;
functionname ::= IDENT;
parametername ::= IDENT;
procedurename ::= IDENT;


/*****************************************************************************

  YOUR CAREFULLY CRAFTED GRAMMAR FOR THE CSC488S SOURCE LANGUAGE

    GOES HERE

****************************************************************************/


