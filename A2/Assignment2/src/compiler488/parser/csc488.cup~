// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */
   
            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}
   
    /** Override the report_fatal_error method to use the report_error method. */
    public void report_fatal_error (String message, Object info) 
	{
        report_error (message, info);
	}
   
:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2009/2010 

// Terminals returned by the scanner with no value attached.  
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	BEGIN,	DO,	ELSE,	END,	EXIT	;
terminal	IF,	RETURN,	LOOP,	PUT,	GET	;
terminal	THEN,	WHILE,	SKIP,	YIELDS, WHEN	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal program,scope,statement,variablenames,bound,generalBound;
nonterminal output,input,type,arguments,parameters,variable,expression;
nonterminal variablename,arrayname,functionname,parametername,procedurename;
nonterminal expression1,expression2,expression3,expression4,expression5,expression6,expression7,expression8;
nonterminal input1,output1,arguments1,parameters1,variablenames1,statement1;

/**********************************************************

The nonterminals from your grammar go here

***********************************************************/

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

// most of the STATE and STATEn were create to avoid ambiguity
//basically this is a simple transcript of the source language definition
// all working except functions and variables inside expressions

program ::= scope;

statement1 ::= variable GREATER EQUAL expression;
statement1 ::= IF expression THEN statement END;
statement1 ::= IF expression THEN statement ELSE statement END;
statement1 ::= WHILE expression DO statement END;
statement1 ::= LOOP statement END;
statement1 ::= EXIT;
statement1 ::= EXIT WHEN expression;
statement1 ::= RETURN L_PAREN expression R_PAREN;
statement1 ::= RETURN;
statement1 ::= PUT output;
statement1 ::= GET input;
statement1 ::= procedurename;
statement1 ::= procedurename L_PAREN arguments R_PAREN;
statement1 ::= scope;
statement1 ::= type variablenames;
statement1 ::= type FUNCTION functionname scope;
statement1 ::= type FUNCTION functionname L_PAREN parameters R_PAREN scope;
statement1 ::= PROCEDURE procedurename scope;
statement1 ::= PROCEDURE procedurename L_PAREN parameters R_PAREN scope;
statement ::= statement statement1 | statement1;    

variablenames1 ::= variablename;
variablenames1 ::= variablename L_SQUARE bound R_SQUARE;
variablenames1 ::= variablename L_SQUARE bound COMMA bound R_SQUARE;
variablenames ::= variablename COMMA variablenames1 | variablenames1;

bound ::= INTCONST | generalBound DOT DOT generalBound;

generalBound ::= INTCONST | MINUS INTCONST;

scope ::= BEGIN statement END | BEGIN END;

output ::= output COMMA output1 | output1;
output1 ::= expression | TEXTCONST | SKIP;


input ::= input COMMA input1 | input1;
input1 ::= variable;

type ::= INTEGER | BOOLEAN;

arguments ::= arguments COMMA arguments1 | arguments1;
arguments1 ::= expression;

parameters ::= parameters COMMA parameters1 | parameters1;
parameters1 ::= type parametername;

variable ::= variablename;
variable ::= arrayname L_SQUARE expression R_SQUARE;
variable ::= arrayname L_SQUARE expression COMMA expression R_SQUARE;



// the struture following makes the precedence works despite it not explicity say
//  parentesis has higher precedence, since it can change over all others

expression ::= expression OR expression1 | expression1 | L_CURLEY statement YIELDS expression R_CURLEY | parametername;

expression1 ::= expression1 AND expression2 | expression2;

expression2 ::= NOT expression3 | expression3;

expression3 ::= expression4 EQUAL expression4 | expression4 NOT EQUAL expression4 | expression4 LESS expression4 | expression4 LESS EQUAL expression4
	| expression4 GREATER expression4 | expression4 GREATER EQUAL expression4 | expression4;

expression4 ::= expression4 PLUS expression5 | expression4 MINUS expression5 | expression5 | TRUE | FALSE ; 
/*
* here should be also accepted functions and variable however it is not working
* variable | functionname | functionname L_PAREN arguments R_PAREN;
*/

expression5 ::= expression5 TIMES expression6 | expression5 DIVIDE expression6 | expression6;

expression6 ::= MINUS expression7 | expression7;

expression7 ::= L_PAREN expression R_PAREN | expression8 ; 
expression8 ::= INTCONST;
/*
* here should be also accepted functions and variable however it is not working
* variable | functionname | functionname L_PAREN arguments R_PAREN;
*/

variablename ::= IDENT;
arrayname ::= IDENT;
functionname ::= IDENT;
parametername ::= IDENT;
procedurename ::= IDENT;


/*****************************************************************************

  YOUR CAREFULLY CRAFTED GRAMMAR FOR THE CSC488S SOURCE LANGUAGE

    GOES HERE

****************************************************************************/

