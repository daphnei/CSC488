// ********************************************
// *** CSC488 ASSIGNMENT 2: LANGUAGE PARSER ***
// ********************************************

// Package and import specifications section.

package compiler488.parser;
import java_cup.runtime.*; // Must always import this.

/**
 * User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */

/**
 * action code {:
 *     your code goes HERE
 * :};
 */

/**
 * User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

  String lastError;
  
  /**
   * Override the report_error method so it will display the line and
   * column of where the error occurred in the input as well as the
   * reason for the error which is passed into the method in the
   * String 'message'.
   * @param message  error message to print
   * @param info     symbol containing line/column numbers
   */
  public void report_error(String message, Object info)
  {
    String st =  "Error";
 
    if (info instanceof java_cup.runtime.Symbol)
    {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      /**
       * s.left is supposed to hold the line number of the error.
       * s.right is supposed to hold the column number.
       * If either is < 0 the parser may have run off the end of the program
       * and a Syntax Error message without line number may be printed.
       */
      if (s.left >= 0)        // Check line number.
      {
        st += " in line " + (s.left + 1);
        if (s.right >= 0)     // Check column number.
        {
          st += ", column " + (s.right + 1);
        }
      }
      else
      {
        st += " at end of input ";
      }
    }

    st += ": " + message;
    System.err.println (st);
    lastError = st;
  }
   
  /**
   * Override the report_fatal_error method to use the report_error method.
   */
  public void report_fatal_error (String message, Object info) 
  {
        report_error (message, info);
  }
:};

/**
 * User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/**
 * User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */

/**
 * scan with {:
 * your code goes here
 * :};
 */

/**
 * Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */



// *************************************************************
// *** DEFINITIONS for CSC488S Source Language (Spring 2015) ***
// *************************************************************

// Terminals returned by the scanner with no value attached.  
terminal  AND,  OR, NOT,  TRUE, FALSE;
terminal  BOOLEAN,INTEGER,FUNCTION, PROCEDURE;
terminal  BEGIN,  DO, ELSE, END,  EXIT;
terminal  IF, RETURN, LOOP, PUT,  GET;
terminal  THEN, WHILE,  SKIP, YIELDS, WHEN;

// Special-character terminals, no value attached.
terminal  L_PAREN ,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY;
terminal  EQUAL,  GREATER,LESS, COMMA,  DOT;
terminal  PLUS, MINUS,  TIMES,  DIVIDE;

// Terminals returned by the scanner with a value.
terminal String  IDENT;
terminal Integer INTCONST;
terminal String  TEXTCONST;



// **********************************
// *** NON-TERMINALS DEFINITIONS  ***
// **********************************

// See the CSC488S Source Language Reference Grammar for a more detailed
// description of each non-terminal.
//
// Note that many of the non-terminals have "Single" and "Multiple"
// versions. These are needed to prevent ambiguity when the non-terminals
// are repeated.
//
// Although expressions are a singular concept, they are divided into
// multiple non-terminals to enforce precedence.

nonterminal program;
nonterminal statementSingle, statementMultiple;
nonterminal variableNamesSingle, variableNamesMultiple;
nonterminal bound, generalBound;
nonterminal scope;
nonterminal outputSingle, outputMultiple;
nonterminal inputSingle, inputMultiple;
nonterminal type;
nonterminal argumentsSingle, argumentsMultiple;
nonterminal parametersSingle, parametersMultiple;
nonterminal variable;
nonterminal expression;
nonterminal andExpression, orExpression, notExpression, compareExpression, addSubExpression;
nonterminal multDivExpression, negativeExpression, parenExpression, intExpression;
nonterminal name;


program ::= scope;

statementSingle ::=         variable LESS EQUAL expression
                          | IF expression THEN statementMultiple END
                          | IF expression THEN statementMultiple ELSE statementMultiple END
                          | WHILE expression DO statementMultiple END
                          | LOOP statementMultiple END
                          | EXIT
                          | EXIT WHEN expression
                          | RETURN L_PAREN expression R_PAREN
                          | RETURN
                          | PUT outputMultiple
                          | GET inputMultiple
                          | name
                          | name L_PAREN argumentsMultiple R_PAREN
                          | scope
                          | type variableNamesMultiple
                          | type FUNCTION name scope
                          | type FUNCTION name L_PAREN parametersMultiple R_PAREN scope
                          | PROCEDURE name scope
                          | PROCEDURE name L_PAREN parametersMultiple R_PAREN scope;
statementMultiple ::=       statementMultiple statementSingle
                          | statementSingle;    

variableNamesSingle ::=     name
                          | name L_SQUARE bound R_SQUARE
                          | name L_SQUARE bound COMMA bound R_SQUARE;
variableNamesMultiple ::=   variableNamesMultiple COMMA variableNamesSingle
                          | variableNamesSingle;

bound ::=                   INTCONST
                          | generalBound DOT DOT generalBound;

generalBound ::=            INTCONST
                          | MINUS INTCONST;

scope ::=                   BEGIN statementMultiple END
                          | BEGIN END;

type ::=                    INTEGER
                          | BOOLEAN;

outputSingle ::=            expression
                          | TEXTCONST
                          | SKIP;
outputMultiple ::=          outputMultiple COMMA outputSingle
                          | outputSingle;

inputSingle ::=             variable;
inputMultiple ::=           inputMultiple COMMA inputSingle
                          | inputSingle;

argumentsSingle ::=         expression;
argumentsMultiple ::=       argumentsMultiple COMMA argumentsSingle
                          | argumentsSingle;

parametersSingle ::=        type name;
parametersMultiple ::=      parametersMultiple COMMA parametersSingle
                          | parametersSingle;

variable ::=                name
                          | name L_SQUARE expression R_SQUARE
                          | name L_SQUARE expression COMMA expression R_SQUARE;

expression ::=              L_CURLEY statementMultiple YIELDS expression R_CURLEY
                          | orExpression;

orExpression ::=            orExpression OR andExpression 
                          | andExpression ;

andExpression ::=           andExpression AND notExpression 
                          | notExpression;

notExpression ::=           NOT notExpression 
                          | compareExpression;

compareExpression ::=       addSubExpression EQUAL addSubExpression 
                          | addSubExpression NOT EQUAL addSubExpression 
                          | addSubExpression LESS addSubExpression 
                          | addSubExpression LESS EQUAL addSubExpression
                          | addSubExpression GREATER addSubExpression 
                          | addSubExpression GREATER EQUAL addSubExpression 
                          | addSubExpression;

addSubExpression ::=        addSubExpression PLUS multDivExpression 
                          | addSubExpression MINUS multDivExpression 
                          | multDivExpression 
                          | TRUE 
                          | FALSE ; 

multDivExpression ::=       multDivExpression TIMES negativeExpression 
                          | multDivExpression DIVIDE negativeExpression 
                          | negativeExpression;

negativeExpression ::=      MINUS negativeExpression 
                          | parenExpression ;

parenExpression ::=         L_PAREN expression R_PAREN 
                          | intExpression ; 

intExpression ::=           INTCONST
                          | name L_PAREN argumentsMultiple R_PAREN
                          | variable;

name ::= IDENT;





